plugins {
    id 'java'
    id 'checkstyle'
}

checkstyle {
    // nothing to add here
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.postgresql', name: 'postgresql', version: '42.+'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.12.v20180830'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.+'
    compile group: 'com.google.guava', name: 'guava', version: '28.1-jre'
    runtime group: 'org.slf4j', name: 'slf4j-simple', version: '1.+'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
    }
}

// simple task for educational purposes - shows the dependencies real path
task printClasspath {
    doLast {
        configurations.compile.each { println it }
    }
}

task copyRuntimeDependencies(type: Copy) {
    into 'build/libs'
    from configurations.runtime
}

// run ./gradlew dependencies to see the dependency graph

task pgPrms {
    def url = System.getenv('JDBC_DATABASE_URL')
    if (url == null || url.allWhitespace) {
        url = 'jdbc:postgresql://localhost:5432/school?user=postgres&password=changeit'
        println('no JDBC_DATABASE_URL environment variable found, using default value')
    }
    def uri = new URI(url.substring(5))
    ext.host = uri.host
    ext.port = uri.port
    ext.db = uri.path.substring(1)
    def queryMap = uri.query.tokenize('&')*.tokenize('=').collectEntries()
    ext.user = queryMap.user
    ext.password = queryMap.password
}

task startPostgres(type: Exec) {
    dependsOn pgPrms
    commandLine 'docker', 'run',
            '--name', 'ls-postgres',
            '-e', "POSTGRES_PASSWORD=$pgPrms.ext.password",
            '-p', '5432:5432/tcp',
            '-d', 'postgres'
}

task stopPostgres(type: Exec) {
    commandLine 'docker', 'rm', '--force', 'ls-postgres'
}

String db = 'school'

task dropDb(type: Exec) {
    dependsOn pgPrms
    commandLine 'dropdb',
            '--if-exists',
            '-h', pgPrms.ext.host,
            '-U', pgPrms.ext.user,
            '-w', pgPrms.ext.db

    ext.output = {
        return standardOutput.toString()
    }
    environment PGPASSWORD: pgPrms.ext.password
}

task createDb(type: Exec) {
    dependsOn pgPrms, dropDb
    commandLine 'createdb',
            '-h', pgPrms.ext.host,
            '-U', pgPrms.ext.user,
            '-w', db
    ext.output = {
        return standardOutput.toString()
    }
    environment PGPASSWORD: pgPrms.ext.password
}

task initSchema(type: Exec) {
    dependsOn pgPrms, createDb
    commandLine 'psql', 
            '-h', pgPrms.ext.host, 
            '-U', pgPrms.ext.user,
            '-d', pgPrms.ext.db, 
            '-w', 
            '-f', 'src/test/sql/createSchema.sql'
    ext.output = {
        return standardOutput.toString()
    }
    environment PGPASSWORD: pgPrms.ext.password
}

task addData(type: Exec) {
    dependsOn pgPrms, initSchema
    commandLine 'psql',
            '-h', pgPrms.ext.host,
            '-U', pgPrms.ext.user,
            '-d', pgPrms.ext.db,
            '-w',
            '-f', 'src/test/sql/addData.sql'
    ext.output = {
        return standardOutput.toString()
    }
    environment PGPASSWORD: pgPrms.ext.password
}

task stage(dependsOn: ['build', 'copyRuntimeDependencies'])
