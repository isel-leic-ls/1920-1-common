plugins {
    id 'java'
    id 'checkstyle'
}

checkstyle {

}

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'vendor/main', include: '*.jar')
    testCompile fileTree(dir: 'vendor/test', include: '*.jar')
}

task pgPrms {
    def url = System.getenv('JDBC_DATABASE_URL')
    if (url == null || url.allWhitespace) {
        url = 'jdbc:postgresql://localhost:5432/school?username=postgres&password=changeit'
        println('no JDBC_DATABASE_URL environment variable found, using default value')
    }
    def uri = new URI(url.substring(5))
    ext.host = uri.host
    ext.port = uri.port
    ext.db = uri.path.substring(1)
    def queryMap = uri.query.tokenize('&')*.tokenize('=').collectEntries()
    ext.user = queryMap.user
    ext.password = queryMap.password
}

task startPostgres(type: Exec) {
    dependsOn pgPrms
    commandLine 'docker', 'run',
            '--name', 'ls-postgres',
            '-e', "POSTGRES_PASSWORD=$pgPrms.ext.password",
            '-p', '5432:5432/tcp',
            '-d', 'postgres'
}

task stopPostgres(type: Exec) {
    commandLine 'docker', 'rm', '--force', 'ls-postgres'
}

String db = 'school'

task dropDb(type: Exec) {
    dependsOn pgPrms
    commandLine 'dropdb',
            '--if-exists',
            '-h', pgPrms.ext.host,
            '-U', pgPrms.ext.user,
            '-w', pgPrms.ext.db
    ext.output = {
        return standardOutput.toString()
    }
    environment PGPASSWORD: pgPrms.ext.password
}

task createDb(type: Exec) {
    dependsOn pgPrms
    commandLine 'createdb',
            '-h', pgPrms.ext.host,
            '-U', pgPrms.ext.user,
            '-w', db
    ext.output = {
        return standardOutput.toString()
    }
    environment PGPASSWORD: pgPrms.ext.password
}
createDb.dependsOn(dropDb)
task initSchema(type: Exec) {
    dependsOn pgPrms
    commandLine 'psql', 
            '-h', pgPrms.ext.host, 
            '-U', pgPrms.ext.user,
            '-d', pgPrms.ext.db, 
            '-w', 
            '-f', 'src/test/sql/createSchema.sql'
    ext.output = {
        return standardOutput.toString()
    }
    environment PGPASSWORD: pgPrms.ext.password
}

task addData(type: Exec) {
    dependsOn pgPrms
    commandLine 'psql',
            '-h', pgPrms.ext.host,
            '-U', pgPrms.ext.user,
            '-d', pgPrms.ext.db,
            '-w',
            '-f', 'src/test/sql/addData.sql'
    ext.output = {
        return standardOutput.toString()
    }
    environment PGPASSWORD: pgPrms.ext.password
}
addData.dependsOn(initSchema)

task stage(dependsOn: ['build'])
